from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils import markdown

from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.orm import selectinload, joinedload

import app.keyboards as kb
import app.states as st
import app.utils as ut
from . import User, Token, Role, ApplicationType
from app.validators.registration import RegistrationValidator
from database import get_async_session
import database.response as rq

import logging
logging.basicConfig(level=logging.INFO)

router = Router()

#–°—Ç–∞—Ä—Ç
@router.message(CommandStart())
async def cmd_start(message: Message):
    session = await get_async_session()
    try:
        result = await session.execute(
            select(User)
            .where(User.username == message.from_user.username)
            .options(selectinload(User.created_group), selectinload(User.tokens))
        )
        user = result.unique().scalar_one_or_none()
        
        msg = '–ü—Ä–∏–≤–µ—Çüëã\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—éüîç'
        keyboard = kb.start

        if user:
            if user.get_token():
                msg = '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–ºüëã\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—éüîç'
                print(user.created_group)
                if user.created_group == []:
                    keyboard = kb.ungroup_main
                else:
                    keyboard = kb.main
            await message.answer(msg, reply_markup=keyboard)
        else:
            await message.answer(msg, reply_markup=keyboard)
    finally:
        await session.close()


#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è============================================================================================================


@router.message(lambda message: message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def get_full_name(message: Message, state: FSMContext):
    await state.update_data(username=message.from_user.username)
    await state.set_state(st.Registration.full_name)
    await message.answer('üë®‚Äçüéì–í–≤–µ–¥–∏—Ç–µ –§–ò–û', reply_markup=kb.cancel)

@router.message(st.Registration.full_name)
async def get_password(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(st.Registration.password)
    await message.answer('üîë–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å', reply_markup=kb.cancel)

@router.message(st.Registration.password)
async def get_confirm_password(message: Message, state: FSMContext):
    await state.update_data(password=message.text)
    await state.set_state(st.Registration.confirm_password)
    await message.answer('üîë–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å ', reply_markup=kb.cancel)

@router.message(st.Registration.confirm_password)
async def registration(message: Message, state: FSMContext):
    try:
        await state.update_data(confirm_password=message.text)
        data = await state.get_data()
        full_name = data["full_name"]
        password = data["password"]
        confirm_password = data["confirm_password"]

        validator = RegistrationValidator(full_name, password, confirm_password)
        error_message = await validator.validate()

        if error_message:
            await message.answer(f'‚ùå*–û—à–∏–±–∫–∞1:* {error_message}', parse_mode="Markdown", reply_markup=kb.start)
        else:
            session = await get_async_session()
            parts = full_name.split()
            surname, name, patronymic = parts
            try:
                await rq.register_user(
                    session,
                    message.from_user.username,
                    password,
                    name,
                    surname,
                    patronymic
                )

                await message.answer(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *@{message.from_user.username}* —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.', parse_mode="Markdown", reply_markup=kb.start)
            except Exception as e:
                await message.answer(f'‚ùå*–û—à–∏–±–∫–∞2:* {e}', parse_mode="Markdown", reply_markup=kb.start)
    
    except Exception as e:
        await message.answer(f'‚ùå*–û—à–∏–±–∫–∞3:* {str(e)}', parse_mode="Markdown", reply_markup=kb.start)

    finally:
        await session.close()
        await state.clear()


#–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è============================================================================================================


@router.message(lambda message: message.text == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
async def get_password(message: Message, state: FSMContext):
    await state.set_state(st.Auth.password)
    await message.answer('üîë–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', reply_markup=kb.cancel)

@router.message(st.Auth.password)
async def authorazation(message: Message, state: FSMContext):
    login = message.from_user.username
    password = message.text
    
    try:
        session = await get_async_session()
        result = await session.execute(
                select(User).filter(User.username == login)
                .options(selectinload(User.groups))
            )
        user = result.scalar_one_or_none()
        
        keyboard = kb.main

        if user and user.check_password(password):
            token = user.generate_token()
            token = Token(user_id=user.id, token=token)
            session.add(token)
            await session.commit()

            if not user.groups:
                keyboard = kb.ungroup_main

            await message.answer(f"*@{message.from_user.username}*, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úåÔ∏è", parse_mode="Markdown", reply_markup=keyboard)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    except Exception as e:
        await message.answer(f'‚ùå–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {e}')
    finally:
        await session.close()
        await state.clear()


#–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã============================================================================================================


@router.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É")
async def group_create(message: Message, state: FSMContext):
    session = await get_async_session()
    tg_username = message.from_user.username
    try:
        result = await session.execute(
            select(User)
            .where(User.username == tg_username)
            .options(selectinload(User.created_group), selectinload(User.tokens)))
        
        user = result.unique().scalar_one_or_none()

        if not user:
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{tg_username} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', reply_markup=kb.start)

        elif user.tokens is None:
            await message.answer(f'–ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é', reply_markup=kb.start)

        elif user.role is Role.ELDER:
            if user.created_group == []:
                await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–ù–µ –Ω–æ–º–µ—Ä)')
                await state.set_state(st.GroupCreate.title)
            else:
                await message.answer(f'"–°—Ç–∞—Ä–æ—Å—Ç–∞" –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 –≥—Ä—É–ø–ø—É', reply_markup=kb.main)
        else:
            await message.answer(f'–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ç–∞—Ç—å "–°—Ç–∞—Ä–æ—Å—Ç–æ–π", –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É, –µ—ë —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', reply_markup=kb.ungroup_main)

    finally:
        await session.close()

@router.message(st.GroupCreate.title)
async def group_title(message: Message, state: FSMContext):
    await state.update_data(creator=message.from_user.username)
    await state.update_data(title=message.text)
    
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', reply_markup=kb.specializations)

@router.callback_query(lambda query: query.data.startswith('spec_'))
async def group_specialization(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete_reply_markup()

    specialization = callback.data.split('_', 1)[1]
    await callback.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ *{specialization}*', parse_mode='Markdown')
    await state.update_data(specialization=specialization)

    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è', reply_markup=kb.course_number)

@router.callback_query(lambda query: query.data.startswith('course_number_'))
async def group_course_number(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete_reply_markup()

    course_number = int(callback.data.split('_')[2])
    await callback.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ *{course_number} –∫—É—Ä—Å*', parse_mode='Markdown')

    session= await get_async_session()
    data = await state.get_data()
    title = data["title"]
    specialization = await rq.get_specialization(data["specialization"])
    username = data["creator"]

    group = await rq.create_group(session, title, specialization, course_number, username)

    if group:
        await callback.message.answer(text=f'–ì—Ä—É–ø–ø–∞ *{group.title}* –¥–ª—è *{group.course_number}* –∫—É—Ä—Å–∞ —Å–æ–∑–¥–∞–Ω–∞. –°—Ç–∞—Ä–æ—Å—Ç–∞ *@{username}*', parse_mode='Markdown' ,reply_markup=kb.main)


#–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É ============================================================================================================>


@router.message(lambda message: message.text == "–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É")
async def group_join(message: Message, state: FSMContext):
    try:
        session = await get_async_session()
        user = await rq.get_user(session, message.from_user.username)
        groups_without_application_from_user = await rq.get_groups_without_application_from_user(session, user.id)

        await state.update_data(user_id=user.id)

        if groups_without_application_from_user != []:
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É', parse_mode='Markdown', reply_markup=await kb.inline_groups(groups_without_application_from_user))
        else:
            await message.answer('–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', parse_mode='Markdown', reply_markup=kb.ungroup_main)

    finally:
        await session.close()

@router.callback_query(lambda query: query.data.startswith('group_'))
async def group_application(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete_reply_markup()

    session = await get_async_session()
    data = await state.get_data()
    user_id = data["user_id"]
    group_fields = callback.data.split('_')
    group_id = int(group_fields[1])
    group_title = group_fields[2]

    request = await rq.send_application(session, ApplicationType.GROUP_JOIN, user_id, group_id)

    if request:
        await callback.message.edit_text(f'–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ *{group_title}* –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', parse_mode='Markdown')
    else:
        await callback.message.edit_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ')


#–°—Ç–∞—Ç—å —Å—Ç–∞—Ä–æ—Å—Ç–æ–π ============================================================================================================>


@router.message(lambda message: message.text == "–°—Ç–∞—Ç—å —Å—Ç–∞—Ä–æ—Å—Ç–æ–π")
async def group_join(message: Message):
    try:
        session = await get_async_session()
        user = await rq.get_user(session, message.from_user.username)

        application = await rq.get_application(session, ApplicationType.BECOME_ELDER, user.id, None)
        msg = f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ *{ut.format_datetime(application.last_update_at)}*'
        
        if application is None:
            application = await rq.send_application(session, ApplicationType.BECOME_ELDER, user.id, None)
            msg = '–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ *"–°—Ç–∞—Ä–æ—Å—Ç–∞"* –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'

        await message.answer(msg, parse_mode='Markdown')

    finally:
        await session.close()

@router.callback_query(F.data == 'cancel')
async def clear(callback:CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text('‚úÖ–û—Ç–º–µ–Ω–µ–Ω–æ')